name: $(BuildID)_$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
resources:
- repo: self
  clean: true
jobs:
- job: windowsx86
  displayName: 'Build Windows x86'
  pool:
    name: Azure-MessagingStore
    demands:
    - Build
    - Cmd
    - msbuild
    - visualstudio

  steps:
  - task: BatchScript@1
    displayName: 'Git submodule update'
    inputs:
      filename: 'C:\Program Files\Git\bin\git.exe'
      arguments: 'submodule update --init --force'

  - task: BatchScript@1
    displayName: 'Git submodule clean'
    inputs:
      filename: 'C:\Program Files\Git\bin\git.exe'
      arguments: 'submodule foreach --recursive "git clean -xdff"'

  - task: BatchScript@1
    displayName: 'Git clean'
    inputs:
      filename: 'C:\Program Files\Git\bin\git.exe'
      arguments: 'clean -xdff'
      
  - task: BatchScript@1
    displayName: 'Setup VS vars'
    inputs:
      filename: '"C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat"'
      modifyEnvironment: true

  - task: CMake@1
    displayName: CMake
    inputs:
      cmakeArgs: '.. -Drun_int_tests:bool=ON -G "Visual Studio 16 2019" -A Win32'

  - task: VSBuild@1
    displayName: 'Build solution build\*.sln (RelWithDebInfo)'
    inputs:
      solution: 'build\*.sln'
      msbuildArgs: '/t:restore /t:build' 
      configuration: RelWithDebInfo
      clean: true
      maximumCpuCount: true

  - task: CmdLine@1
    displayName: 'Run ctest (RelWithDebInfo)'
    inputs:
      filename: ctest
      arguments: '-C "RelWithDebInfo" -V --output-on-failure'
      workingFolder: build

- job: windowsx64
  displayName: 'Build Windows x64'
  pool:
    name: Azure-MessagingStore
    demands:
    - Build
    - Cmd
    - msbuild
    - visualstudio

  steps:
  - task: BatchScript@1
    displayName: 'Git submodule update'
    inputs:
      filename: 'C:\Program Files\Git\bin\git.exe'
      arguments: 'submodule update --init --force'

  - task: BatchScript@1
    displayName: 'Git submodule clean'
    inputs:
      filename: 'C:\Program Files\Git\bin\git.exe'
      arguments: 'submodule foreach --recursive "git clean -xdff"'

  - task: BatchScript@1
    displayName: 'Git clean'
    inputs:
      filename: 'C:\Program Files\Git\bin\git.exe'
      arguments: 'clean -xdff'

  - task: BatchScript@1
    displayName: 'Setup VS vars'
    inputs:
      filename: '"C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat"'
      modifyEnvironment: true

  - task: CMake@1
    displayName: CMake
    inputs:
      cmakeArgs: '.. -Drun_int_tests:bool=ON -G "Visual Studio 16 2019" -A x64'

  - task: VSBuild@1
    displayName: 'Build solution build\*.sln (Debug)'
    inputs:
      solution: 'build\*.sln'
      msbuildArgs: '/t:restore /t:build' 
      configuration: Debug
      clean: true
      maximumCpuCount: true

  - task: CmdLine@1
    displayName: 'Run ctest (Debug)'
    inputs:
      filename: ctest
      arguments: '-C "Debug" -V --output-on-failure'
      workingFolder: build


- job: linuxubuntu
  displayName: 'Build Linux Ubuntu 18.04'
  pool:
    name: Azure-MessagingStore
    demands:
      - linux

  steps:
  - bash: |
     pushd $(Build.Repository.LocalPath)
     git submodule update --init
     git submodule foreach --recursive "git clean -xdff"
     git clean -xdff
     popd
    workingDirectory: '$(Build.Repository.LocalPath)'
    displayName: 'git submodule update and clean'

  - task: Bash@3
    displayName: 'Build and run tests'
    inputs:
      targetType: filePath
      filePath: './build/linux/build_linux.sh'
      arguments: '$(Build.Repository.LocalPath)'
      workingDirectory: '$(Build.Repository.LocalPath)'

- job: includecheck_linux
  pool:
    name: Azure-MessagingStore
    demands:
      - linux

  steps:
  - bash: |
     pushd $(Build.Repository.LocalPath)
     git submodule update --init
     git submodule foreach --recursive "git clean -xdff"
     git clean -xdff
     popd
    workingDirectory: '$(Build.Repository.LocalPath)'
    displayName: 'git submodule update and clean'

  - task: Bash@3
    displayName: 'Build with iwyu'
    inputs:
      targetType: filePath
      filePath: './build/linux/build_linux_iwyu.sh'
      arguments: '$(Build.Repository.LocalPath)'
      workingDirectory: '$(Build.Repository.LocalPath)'
